/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedOnlyRouteRouteImport } from './routes/_unauthenticated-only/route'
import { Route as RegardlessOfAuthRouteRouteImport } from './routes/_regardless-of-auth/route'
import { Route as AuthenticatedOnlyRouteRouteImport } from './routes/_authenticated-only/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UnauthenticatedOnlySignupRouteImport } from './routes/_unauthenticated-only/signup'
import { Route as UnauthenticatedOnlyLoginRouteImport } from './routes/_unauthenticated-only/login'
import { Route as AdminOnlyAdminRouteImport } from './routes/_admin-only/admin'
import { Route as AuthenticatedOnlyMeIndexRouteImport } from './routes/_authenticated-only/me/index'
import { Route as RegardlessOfAuthSingleDeviceDefaultGameRouteImport } from './routes/_regardless-of-auth/single-device/default-game'
import { Route as RegardlessOfAuthSingleDeviceAlteredGameRouteImport } from './routes/_regardless-of-auth/single-device/altered-game'
import { Route as AuthenticatedOnlyMultipleDeviceDefaultGameRouteImport } from './routes/_authenticated-only/multiple-device/default-game'
import { Route as AuthenticatedOnlyMultipleDeviceAlteredGameRouteImport } from './routes/_authenticated-only/multiple-device/altered-game'

const UnauthenticatedOnlyRouteRoute =
  UnauthenticatedOnlyRouteRouteImport.update({
    id: '/_unauthenticated-only',
    getParentRoute: () => rootRouteImport,
  } as any)
const RegardlessOfAuthRouteRoute = RegardlessOfAuthRouteRouteImport.update({
  id: '/_regardless-of-auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOnlyRouteRoute = AuthenticatedOnlyRouteRouteImport.update({
  id: '/_authenticated-only',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthenticatedOnlySignupRoute =
  UnauthenticatedOnlySignupRouteImport.update({
    id: '/signup',
    path: '/signup',
    getParentRoute: () => UnauthenticatedOnlyRouteRoute,
  } as any)
const UnauthenticatedOnlyLoginRoute =
  UnauthenticatedOnlyLoginRouteImport.update({
    id: '/login',
    path: '/login',
    getParentRoute: () => UnauthenticatedOnlyRouteRoute,
  } as any)
const AdminOnlyAdminRoute = AdminOnlyAdminRouteImport.update({
  id: '/_admin-only/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOnlyMeIndexRoute =
  AuthenticatedOnlyMeIndexRouteImport.update({
    id: '/me/',
    path: '/me/',
    getParentRoute: () => AuthenticatedOnlyRouteRoute,
  } as any)
const RegardlessOfAuthSingleDeviceDefaultGameRoute =
  RegardlessOfAuthSingleDeviceDefaultGameRouteImport.update({
    id: '/single-device/default-game',
    path: '/single-device/default-game',
    getParentRoute: () => RegardlessOfAuthRouteRoute,
  } as any)
const RegardlessOfAuthSingleDeviceAlteredGameRoute =
  RegardlessOfAuthSingleDeviceAlteredGameRouteImport.update({
    id: '/single-device/altered-game',
    path: '/single-device/altered-game',
    getParentRoute: () => RegardlessOfAuthRouteRoute,
  } as any)
const AuthenticatedOnlyMultipleDeviceDefaultGameRoute =
  AuthenticatedOnlyMultipleDeviceDefaultGameRouteImport.update({
    id: '/multiple-device/default-game',
    path: '/multiple-device/default-game',
    getParentRoute: () => AuthenticatedOnlyRouteRoute,
  } as any)
const AuthenticatedOnlyMultipleDeviceAlteredGameRoute =
  AuthenticatedOnlyMultipleDeviceAlteredGameRouteImport.update({
    id: '/multiple-device/altered-game',
    path: '/multiple-device/altered-game',
    getParentRoute: () => AuthenticatedOnlyRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminOnlyAdminRoute
  '/login': typeof UnauthenticatedOnlyLoginRoute
  '/signup': typeof UnauthenticatedOnlySignupRoute
  '/multiple-device/altered-game': typeof AuthenticatedOnlyMultipleDeviceAlteredGameRoute
  '/multiple-device/default-game': typeof AuthenticatedOnlyMultipleDeviceDefaultGameRoute
  '/single-device/altered-game': typeof RegardlessOfAuthSingleDeviceAlteredGameRoute
  '/single-device/default-game': typeof RegardlessOfAuthSingleDeviceDefaultGameRoute
  '/me': typeof AuthenticatedOnlyMeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminOnlyAdminRoute
  '/login': typeof UnauthenticatedOnlyLoginRoute
  '/signup': typeof UnauthenticatedOnlySignupRoute
  '/multiple-device/altered-game': typeof AuthenticatedOnlyMultipleDeviceAlteredGameRoute
  '/multiple-device/default-game': typeof AuthenticatedOnlyMultipleDeviceDefaultGameRoute
  '/single-device/altered-game': typeof RegardlessOfAuthSingleDeviceAlteredGameRoute
  '/single-device/default-game': typeof RegardlessOfAuthSingleDeviceDefaultGameRoute
  '/me': typeof AuthenticatedOnlyMeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated-only': typeof AuthenticatedOnlyRouteRouteWithChildren
  '/_regardless-of-auth': typeof RegardlessOfAuthRouteRouteWithChildren
  '/_unauthenticated-only': typeof UnauthenticatedOnlyRouteRouteWithChildren
  '/_admin-only/admin': typeof AdminOnlyAdminRoute
  '/_unauthenticated-only/login': typeof UnauthenticatedOnlyLoginRoute
  '/_unauthenticated-only/signup': typeof UnauthenticatedOnlySignupRoute
  '/_authenticated-only/multiple-device/altered-game': typeof AuthenticatedOnlyMultipleDeviceAlteredGameRoute
  '/_authenticated-only/multiple-device/default-game': typeof AuthenticatedOnlyMultipleDeviceDefaultGameRoute
  '/_regardless-of-auth/single-device/altered-game': typeof RegardlessOfAuthSingleDeviceAlteredGameRoute
  '/_regardless-of-auth/single-device/default-game': typeof RegardlessOfAuthSingleDeviceDefaultGameRoute
  '/_authenticated-only/me/': typeof AuthenticatedOnlyMeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/signup'
    | '/multiple-device/altered-game'
    | '/multiple-device/default-game'
    | '/single-device/altered-game'
    | '/single-device/default-game'
    | '/me'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/login'
    | '/signup'
    | '/multiple-device/altered-game'
    | '/multiple-device/default-game'
    | '/single-device/altered-game'
    | '/single-device/default-game'
    | '/me'
  id:
    | '__root__'
    | '/'
    | '/_authenticated-only'
    | '/_regardless-of-auth'
    | '/_unauthenticated-only'
    | '/_admin-only/admin'
    | '/_unauthenticated-only/login'
    | '/_unauthenticated-only/signup'
    | '/_authenticated-only/multiple-device/altered-game'
    | '/_authenticated-only/multiple-device/default-game'
    | '/_regardless-of-auth/single-device/altered-game'
    | '/_regardless-of-auth/single-device/default-game'
    | '/_authenticated-only/me/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedOnlyRouteRoute: typeof AuthenticatedOnlyRouteRouteWithChildren
  RegardlessOfAuthRouteRoute: typeof RegardlessOfAuthRouteRouteWithChildren
  UnauthenticatedOnlyRouteRoute: typeof UnauthenticatedOnlyRouteRouteWithChildren
  AdminOnlyAdminRoute: typeof AdminOnlyAdminRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauthenticated-only': {
      id: '/_unauthenticated-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedOnlyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_regardless-of-auth': {
      id: '/_regardless-of-auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RegardlessOfAuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-only': {
      id: '/_authenticated-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedOnlyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_unauthenticated-only/signup': {
      id: '/_unauthenticated-only/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof UnauthenticatedOnlySignupRouteImport
      parentRoute: typeof UnauthenticatedOnlyRouteRoute
    }
    '/_unauthenticated-only/login': {
      id: '/_unauthenticated-only/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthenticatedOnlyLoginRouteImport
      parentRoute: typeof UnauthenticatedOnlyRouteRoute
    }
    '/_admin-only/admin': {
      id: '/_admin-only/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminOnlyAdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-only/me/': {
      id: '/_authenticated-only/me/'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof AuthenticatedOnlyMeIndexRouteImport
      parentRoute: typeof AuthenticatedOnlyRouteRoute
    }
    '/_regardless-of-auth/single-device/default-game': {
      id: '/_regardless-of-auth/single-device/default-game'
      path: '/single-device/default-game'
      fullPath: '/single-device/default-game'
      preLoaderRoute: typeof RegardlessOfAuthSingleDeviceDefaultGameRouteImport
      parentRoute: typeof RegardlessOfAuthRouteRoute
    }
    '/_regardless-of-auth/single-device/altered-game': {
      id: '/_regardless-of-auth/single-device/altered-game'
      path: '/single-device/altered-game'
      fullPath: '/single-device/altered-game'
      preLoaderRoute: typeof RegardlessOfAuthSingleDeviceAlteredGameRouteImport
      parentRoute: typeof RegardlessOfAuthRouteRoute
    }
    '/_authenticated-only/multiple-device/default-game': {
      id: '/_authenticated-only/multiple-device/default-game'
      path: '/multiple-device/default-game'
      fullPath: '/multiple-device/default-game'
      preLoaderRoute: typeof AuthenticatedOnlyMultipleDeviceDefaultGameRouteImport
      parentRoute: typeof AuthenticatedOnlyRouteRoute
    }
    '/_authenticated-only/multiple-device/altered-game': {
      id: '/_authenticated-only/multiple-device/altered-game'
      path: '/multiple-device/altered-game'
      fullPath: '/multiple-device/altered-game'
      preLoaderRoute: typeof AuthenticatedOnlyMultipleDeviceAlteredGameRouteImport
      parentRoute: typeof AuthenticatedOnlyRouteRoute
    }
  }
}

interface AuthenticatedOnlyRouteRouteChildren {
  AuthenticatedOnlyMultipleDeviceAlteredGameRoute: typeof AuthenticatedOnlyMultipleDeviceAlteredGameRoute
  AuthenticatedOnlyMultipleDeviceDefaultGameRoute: typeof AuthenticatedOnlyMultipleDeviceDefaultGameRoute
  AuthenticatedOnlyMeIndexRoute: typeof AuthenticatedOnlyMeIndexRoute
}

const AuthenticatedOnlyRouteRouteChildren: AuthenticatedOnlyRouteRouteChildren =
  {
    AuthenticatedOnlyMultipleDeviceAlteredGameRoute:
      AuthenticatedOnlyMultipleDeviceAlteredGameRoute,
    AuthenticatedOnlyMultipleDeviceDefaultGameRoute:
      AuthenticatedOnlyMultipleDeviceDefaultGameRoute,
    AuthenticatedOnlyMeIndexRoute: AuthenticatedOnlyMeIndexRoute,
  }

const AuthenticatedOnlyRouteRouteWithChildren =
  AuthenticatedOnlyRouteRoute._addFileChildren(
    AuthenticatedOnlyRouteRouteChildren,
  )

interface RegardlessOfAuthRouteRouteChildren {
  RegardlessOfAuthSingleDeviceAlteredGameRoute: typeof RegardlessOfAuthSingleDeviceAlteredGameRoute
  RegardlessOfAuthSingleDeviceDefaultGameRoute: typeof RegardlessOfAuthSingleDeviceDefaultGameRoute
}

const RegardlessOfAuthRouteRouteChildren: RegardlessOfAuthRouteRouteChildren = {
  RegardlessOfAuthSingleDeviceAlteredGameRoute:
    RegardlessOfAuthSingleDeviceAlteredGameRoute,
  RegardlessOfAuthSingleDeviceDefaultGameRoute:
    RegardlessOfAuthSingleDeviceDefaultGameRoute,
}

const RegardlessOfAuthRouteRouteWithChildren =
  RegardlessOfAuthRouteRoute._addFileChildren(
    RegardlessOfAuthRouteRouteChildren,
  )

interface UnauthenticatedOnlyRouteRouteChildren {
  UnauthenticatedOnlyLoginRoute: typeof UnauthenticatedOnlyLoginRoute
  UnauthenticatedOnlySignupRoute: typeof UnauthenticatedOnlySignupRoute
}

const UnauthenticatedOnlyRouteRouteChildren: UnauthenticatedOnlyRouteRouteChildren =
  {
    UnauthenticatedOnlyLoginRoute: UnauthenticatedOnlyLoginRoute,
    UnauthenticatedOnlySignupRoute: UnauthenticatedOnlySignupRoute,
  }

const UnauthenticatedOnlyRouteRouteWithChildren =
  UnauthenticatedOnlyRouteRoute._addFileChildren(
    UnauthenticatedOnlyRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedOnlyRouteRoute: AuthenticatedOnlyRouteRouteWithChildren,
  RegardlessOfAuthRouteRoute: RegardlessOfAuthRouteRouteWithChildren,
  UnauthenticatedOnlyRouteRoute: UnauthenticatedOnlyRouteRouteWithChildren,
  AdminOnlyAdminRoute: AdminOnlyAdminRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
